// Code generated by counterfeiter. DO NOT EDIT.
package statusfakes

import (
	"sync"

	"github.com/nginxinc/nginx-kubernetes-gateway/internal/framework/status"
)

type FakeLeaderElector struct {
	IsLeaderStub        func() bool
	isLeaderMutex       sync.RWMutex
	isLeaderArgsForCall []struct {
	}
	isLeaderReturns struct {
		result1 bool
	}
	isLeaderReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLeaderElector) IsLeader() bool {
	fake.isLeaderMutex.Lock()
	ret, specificReturn := fake.isLeaderReturnsOnCall[len(fake.isLeaderArgsForCall)]
	fake.isLeaderArgsForCall = append(fake.isLeaderArgsForCall, struct {
	}{})
	stub := fake.IsLeaderStub
	fakeReturns := fake.isLeaderReturns
	fake.recordInvocation("IsLeader", []interface{}{})
	fake.isLeaderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLeaderElector) IsLeaderCallCount() int {
	fake.isLeaderMutex.RLock()
	defer fake.isLeaderMutex.RUnlock()
	return len(fake.isLeaderArgsForCall)
}

func (fake *FakeLeaderElector) IsLeaderCalls(stub func() bool) {
	fake.isLeaderMutex.Lock()
	defer fake.isLeaderMutex.Unlock()
	fake.IsLeaderStub = stub
}

func (fake *FakeLeaderElector) IsLeaderReturns(result1 bool) {
	fake.isLeaderMutex.Lock()
	defer fake.isLeaderMutex.Unlock()
	fake.IsLeaderStub = nil
	fake.isLeaderReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLeaderElector) IsLeaderReturnsOnCall(i int, result1 bool) {
	fake.isLeaderMutex.Lock()
	defer fake.isLeaderMutex.Unlock()
	fake.IsLeaderStub = nil
	if fake.isLeaderReturnsOnCall == nil {
		fake.isLeaderReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isLeaderReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLeaderElector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isLeaderMutex.RLock()
	defer fake.isLeaderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLeaderElector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ status.LeaderElector = new(FakeLeaderElector)
