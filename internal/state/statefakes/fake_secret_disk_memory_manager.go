// Code generated by counterfeiter. DO NOT EDIT.
package statefakes

import (
	"sync"

	"github.com/nginxinc/nginx-kubernetes-gateway/internal/state"
	"k8s.io/apimachinery/pkg/types"
)

type FakeSecretDiskMemoryManager struct {
	StoreStub        func(types.NamespacedName) (string, error)
	storeMutex       sync.RWMutex
	storeArgsForCall []struct {
		arg1 types.NamespacedName
	}
	storeReturns struct {
		result1 string
		result2 error
	}
	storeReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	WriteAllStoredSecretsStub        func() error
	writeAllStoredSecretsMutex       sync.RWMutex
	writeAllStoredSecretsArgsForCall []struct {
	}
	writeAllStoredSecretsReturns struct {
		result1 error
	}
	writeAllStoredSecretsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretDiskMemoryManager) Store(arg1 types.NamespacedName) (string, error) {
	fake.storeMutex.Lock()
	ret, specificReturn := fake.storeReturnsOnCall[len(fake.storeArgsForCall)]
	fake.storeArgsForCall = append(fake.storeArgsForCall, struct {
		arg1 types.NamespacedName
	}{arg1})
	stub := fake.StoreStub
	fakeReturns := fake.storeReturns
	fake.recordInvocation("Store", []interface{}{arg1})
	fake.storeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretDiskMemoryManager) StoreCallCount() int {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	return len(fake.storeArgsForCall)
}

func (fake *FakeSecretDiskMemoryManager) StoreCalls(stub func(types.NamespacedName) (string, error)) {
	fake.storeMutex.Lock()
	defer fake.storeMutex.Unlock()
	fake.StoreStub = stub
}

func (fake *FakeSecretDiskMemoryManager) StoreArgsForCall(i int) types.NamespacedName {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	argsForCall := fake.storeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretDiskMemoryManager) StoreReturns(result1 string, result2 error) {
	fake.storeMutex.Lock()
	defer fake.storeMutex.Unlock()
	fake.StoreStub = nil
	fake.storeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretDiskMemoryManager) StoreReturnsOnCall(i int, result1 string, result2 error) {
	fake.storeMutex.Lock()
	defer fake.storeMutex.Unlock()
	fake.StoreStub = nil
	if fake.storeReturnsOnCall == nil {
		fake.storeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.storeReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretDiskMemoryManager) WriteAllStoredSecrets() error {
	fake.writeAllStoredSecretsMutex.Lock()
	ret, specificReturn := fake.writeAllStoredSecretsReturnsOnCall[len(fake.writeAllStoredSecretsArgsForCall)]
	fake.writeAllStoredSecretsArgsForCall = append(fake.writeAllStoredSecretsArgsForCall, struct {
	}{})
	stub := fake.WriteAllStoredSecretsStub
	fakeReturns := fake.writeAllStoredSecretsReturns
	fake.recordInvocation("WriteAllStoredSecrets", []interface{}{})
	fake.writeAllStoredSecretsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSecretDiskMemoryManager) WriteAllStoredSecretsCallCount() int {
	fake.writeAllStoredSecretsMutex.RLock()
	defer fake.writeAllStoredSecretsMutex.RUnlock()
	return len(fake.writeAllStoredSecretsArgsForCall)
}

func (fake *FakeSecretDiskMemoryManager) WriteAllStoredSecretsCalls(stub func() error) {
	fake.writeAllStoredSecretsMutex.Lock()
	defer fake.writeAllStoredSecretsMutex.Unlock()
	fake.WriteAllStoredSecretsStub = stub
}

func (fake *FakeSecretDiskMemoryManager) WriteAllStoredSecretsReturns(result1 error) {
	fake.writeAllStoredSecretsMutex.Lock()
	defer fake.writeAllStoredSecretsMutex.Unlock()
	fake.WriteAllStoredSecretsStub = nil
	fake.writeAllStoredSecretsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecretDiskMemoryManager) WriteAllStoredSecretsReturnsOnCall(i int, result1 error) {
	fake.writeAllStoredSecretsMutex.Lock()
	defer fake.writeAllStoredSecretsMutex.Unlock()
	fake.WriteAllStoredSecretsStub = nil
	if fake.writeAllStoredSecretsReturnsOnCall == nil {
		fake.writeAllStoredSecretsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeAllStoredSecretsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecretDiskMemoryManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	fake.writeAllStoredSecretsMutex.RLock()
	defer fake.writeAllStoredSecretsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretDiskMemoryManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ state.SecretDiskMemoryManager = new(FakeSecretDiskMemoryManager)
